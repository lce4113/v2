{"version":3,"sources":["CGOL/CGOL.js","index.js"],"names":["Cell","props","classes","alive","className","Grid","state","grid","Array","fill","map","Math","random","setTimeout","oldgrid","i","length","push","j","neighbors","k","l","setState","update","this","Fragment","row","cell","id","Component","ReactDOM","render","document","getElementById"],"mappings":"yNAqEA,SAASA,EAAKC,GACZ,IAAIC,EAAU,SACXD,EAAME,MAAQ,aAAe,aAChC,OACE,qBAAKC,UAAWF,IAILG,M,kDAxEb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,GACb,EAAKA,MAAMC,KAAOC,MAAM,IAAIC,KAAK,GAAGC,KAAI,kBACtCF,MAAM,KAAKC,KAAK,GAAGC,KAAI,iBACpB,CAAE,MAASC,KAAKC,SAAW,UALpB,E,qDAQJ,IAAD,OACPC,YAAW,WAGT,IAFA,IAAMC,EAAU,EAAKR,MAAMC,KACvBA,EAAO,GACFQ,EAAI,EAAGA,EAAID,EAAQE,OAAQD,IAAK,CACvCR,EAAKU,KAAK,IACV,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAQC,GAAGC,OAAQE,IAAK,CAE1C,IADA,IAAIC,EAAY,EACPC,GAAK,EAAGA,GAAK,EAAGA,IACvB,IAAK,IAAIC,GAAK,EAAGA,GAAK,EAAGA,IAEd,IAAND,GAAiB,IAANC,GACXN,EAAIK,EAAI,GAAKL,EAAIK,GAAKN,EAAQE,QAC9BE,EAAIG,EAAI,GAAKH,EAAIG,GAAKP,EAAQC,GAAGC,QAEhCF,EAAQC,EAAIK,GAAGF,EAAIG,GAAGlB,OACxBgB,IAIFL,EAAQC,GAAGG,GAAGf,MAEdI,EAAKQ,GAAGG,GADNC,EAAY,GAAKA,EAAY,EAClB,CAAE,OAAS,GAEX,CAAE,OAAS,GAIxBZ,EAAKQ,GAAGG,GADQ,IAAdC,EACW,CAAE,OAAS,GAEX,CAAE,OAAS,IAKhC,EAAKG,SAAS,CAAEf,SAChB,EAAKgB,WACJ,M,0CAIHC,KAAKD,W,+BAIL,OACE,cAAC,IAAME,SAAP,UACGD,KAAKlB,MAAMC,KAAKG,KAAI,SAACgB,EAAKX,GAAN,OACnB,qBAAKX,UAAU,MAAf,SAAsBsB,EAAIhB,KAAI,SAACiB,EAAMT,GAAP,OAC5B,cAAClB,EAAD,CAAMG,MAAOwB,EAAKxB,MAAOyB,GAAI,CAACb,EAAGG,mB,GA3D1BW,a,MCEnBC,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.47f51861.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './CGOL.css';\n\nclass Grid extends Component {\n\n  constructor() {\n    super();\n    this.state = {};\n    this.state.grid = Array(50).fill(0).map(() =>\n      Array(100).fill(0).map(() =>\n        ({ \"alive\": Math.random() < 0.2 })));\n  }\n\n  update() {\n    setTimeout(() => {\n      const oldgrid = this.state.grid;\n      var grid = [];\n      for (let i = 0; i < oldgrid.length; i++) {\n        grid.push([]);\n        for (let j = 0; j < oldgrid[i].length; j++) {\n          var neighbors = 0;\n          for (let k = -1; k <= 1; k++) {\n            for (let l = -1; l <= 1; l++) {\n              if (\n                (k === 0 && l === 0) ||\n                (i + k < 0 || i + k >= oldgrid.length) ||\n                (j + l < 0 || j + l >= oldgrid[i].length)\n              ) continue;\n              if (oldgrid[i + k][j + l].alive) {\n                neighbors++;\n              }\n            }\n          }\n          if (oldgrid[i][j].alive) {\n            if (neighbors < 2 || neighbors > 3) {\n              grid[i][j] = { \"alive\": false }\n            } else {\n              grid[i][j] = { \"alive\": true }\n            }\n          } else {\n            if (neighbors === 3) {\n              grid[i][j] = { \"alive\": true }\n            } else {\n              grid[i][j] = { \"alive\": false }\n            }\n          }\n        }\n      }\n      this.setState({ grid });\n      this.update();\n    }, 50);\n  }\n\n  componentDidMount() {\n    this.update();\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.state.grid.map((row, i) =>\n          <div className=\"row\">{row.map((cell, j) =>\n            <Cell alive={cell.alive} id={[i, j]} />)}</div>)}\n      </React.Fragment>\n    );\n  }\n\n}\n\nfunction Cell(props) {\n  var classes = \"cell \" +\n    (props.alive ? \"alive-cell\" : \"dead-cell\");\n  return (\n    <div className={classes}></div>\n  );\n}\n\nexport default Grid;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Grid from './CGOL/CGOL.js';\nimport './main.css';\n\nReactDOM.render(<Grid />, document.getElementById('grid'));"],"sourceRoot":""}